{
  "metadata": {
    "model": "claude-4-sonnet",
    "timestamp": "2025-09-21T17:02:02.208246",
    "duration": 107.826167,
    "total_queries": 28
  },
  "capability_summary": {
    "basic_filter": {
      "total": 4,
      "success": 4,
      "matched_expectations": 4
    },
    "compound_filter": {
      "total": 1,
      "success": 1,
      "matched_expectations": 1
    },
    "subquery": {
      "total": 4,
      "success": 4,
      "matched_expectations": 0
    },
    "correlated": {
      "total": 2,
      "success": 2,
      "matched_expectations": 0
    },
    "scalar_subquery": {
      "total": 1,
      "success": 1,
      "matched_expectations": 0
    },
    "formula": {
      "total": 2,
      "success": 2,
      "matched_expectations": 2
    },
    "conditional": {
      "total": 1,
      "success": 1,
      "matched_expectations": 0
    },
    "formula_filter": {
      "total": 3,
      "success": 3,
      "matched_expectations": 0
    },
    "window_function": {
      "total": 3,
      "success": 2,
      "matched_expectations": 1
    },
    "cumulative": {
      "total": 1,
      "success": 1,
      "matched_expectations": 0
    },
    "statistical": {
      "total": 3,
      "success": 3,
      "matched_expectations": 1
    },
    "ml_relationship": {
      "total": 2,
      "success": 1,
      "matched_expectations": 1
    },
    "ml_cluster": {
      "total": 1,
      "success": 1,
      "matched_expectations": 0
    }
  },
  "results": [
    {
      "id": "basic_1",
      "query": "Count all customers",
      "capability": "basic_filter",
      "timestamp": "2025-09-21T17:02:02.208271",
      "success": true,
      "sql": "SELECT COUNT(*) FROM TELCO_DATA;\n",
      "error": null,
      "matched_expectation": true
    },
    {
      "id": "basic_2",
      "query": "Average monthly charges by contract type",
      "capability": "basic_filter",
      "timestamp": "2025-09-21T17:02:02.931878",
      "success": true,
      "sql": "SELECT CONTRACT, AVG(MONTHLYCHARGES) as avg_monthly_charges\nFROM TELCO_DATA\nGROUP BY CONTRACT;\n",
      "error": null,
      "matched_expectation": true
    },
    {
      "id": "basic_4",
      "query": "Show top 10 customers by total charges",
      "capability": "basic_filter",
      "timestamp": "2025-09-21T17:02:10.379243",
      "success": true,
      "sql": "SELECT CUSTOMERID, TOTALCHARGES\nFROM TELCO_DATA\nORDER BY TOTALCHARGES DESC\nLIMIT 10;\n",
      "error": null,
      "matched_expectation": true
    },
    {
      "id": "basic_5",
      "query": "Count opportunities by stage in C4",
      "capability": "basic_filter",
      "timestamp": "2025-09-21T17:02:11.687062",
      "success": true,
      "sql": "SELECT C4, COUNT(*) as opportunity_count\nFROM OPENOPPORTUNITIES\nGROUP BY C4;\n",
      "error": null,
      "matched_expectation": true
    },
    {
      "id": "basic_3",
      "query": "Customers with fiber optic internet and online security",
      "capability": "compound_filter",
      "timestamp": "2025-09-21T17:02:13.346707",
      "success": true,
      "sql": "SELECT *\nFROM TELCO_DATA\nWHERE INTERNETSERVICE = 'Fiber optic' \nAND ONLINESECURITY = 'Yes';\n",
      "error": null,
      "matched_expectation": true
    },
    {
      "id": "subquery_1",
      "query": "Show all customers from the top 3 payment methods by customer count",
      "capability": "subquery",
      "timestamp": "2025-09-21T17:02:15.422103",
      "success": true,
      "sql": "WITH top_payment_methods AS (\n    SELECT PAYMENTMETHOD\n    FROM TELCO_DATA\n    GROUP BY PAYMENTMETHOD\n    ORDER BY COUNT(CUSTOMERID) DESC\n    LIMIT 3\n)\nSELECT t.*\nFROM TELCO_DATA t\nINNER JOIN top_payment_methods tpm ON t.PAYMENTMETHOD = tpm.PAYMENTMETHOD;\n",
      "error": null,
      "matched_expectation": false
    },
    {
      "id": "subquery_3",
      "query": "Show opportunities from owners (C8) who have more than 3 total opportunities",
      "capability": "subquery",
      "timestamp": "2025-09-21T17:02:16.908764",
      "success": true,
      "sql": "SELECT *\nFROM OPENOPPORTUNITIES\nWHERE C8 IN (\n    SELECT C8\n    FROM OPENOPPORTUNITIES\n    GROUP BY C8\n    HAVING COUNT(*) > 3\n);\n",
      "error": null,
      "matched_expectation": false
    },
    {
      "id": "subquery_4",
      "query": "Customers from the top 5 regions by total revenue where region has >100 customers",
      "capability": "subquery",
      "timestamp": "2025-09-21T17:02:19.520491",
      "success": true,
      "sql": "WITH region_stats AS (\n    SELECT \n        INTERNETSERVICE as region,\n        COUNT(DISTINCT CUSTOMERID) as customer_count,\n        SUM(TOTALCHARGES) as total_revenue\n    FROM TELCO_DATA\n    WHERE INTERNETSERVICE IS NOT NULL\n    GROUP BY INTERNETSERVICE\n    HAVING COUNT(DISTINCT CUSTOMERID) > 100\n),\ntop_regions AS (\n    SELECT region\n    FROM region_stats\n    ORDER BY total_revenue DESC\n    LIMIT 5\n)\nSELECT t.*\nFROM TELCO_DATA t\nINNER JOIN top_regions tr ON t.INTERNETSERVICE = tr.region;\n",
      "error": null,
      "matched_expectation": false
    },
    {
      "id": "complex_1",
      "query": "Top 2 opportunities from each of the top 3 owners by total amount",
      "capability": "subquery",
      "timestamp": "2025-09-21T17:02:22.806929",
      "success": true,
      "sql": "WITH TopOwners AS (\n  SELECT C8 AS Owner, SUM(C3) AS TotalAmount\n  FROM OPENOPPORTUNITIES\n  GROUP BY C8\n  ORDER BY TotalAmount DESC\n  LIMIT 3\n),\nRankedOpportunities AS (\n  SELECT o.*, \n         ROW_NUMBER() OVER (PARTITION BY o.C8 ORDER BY o.C3 DESC) as rn\n  FROM OPENOPPORTUNITIES o\n  INNER JOIN TopOwners t ON o.C8 = t.Owner\n)\nSELECT *\nFROM RankedOpportunities\nWHERE rn <= 2\nORDER BY C8, C3 DESC;\n",
      "error": null,
      "matched_expectation": false
    },
    {
      "id": "subquery_2",
      "query": "List customers with monthly charges above the average for their contract type",
      "capability": "correlated",
      "timestamp": "2025-09-21T17:02:33.485195",
      "success": true,
      "sql": "SELECT CUSTOMERID, CONTRACT, MONTHLYCHARGES\nFROM TELCO_DATA t1\nWHERE MONTHLYCHARGES > (\n    SELECT AVG(MONTHLYCHARGES)\n    FROM TELCO_DATA t2\n    WHERE t2.CONTRACT = t1.CONTRACT\n);\n",
      "error": null,
      "matched_expectation": false
    },
    {
      "id": "complex_2",
      "query": "Customers who are above average for their segment in 3+ metrics",
      "capability": "correlated",
      "timestamp": "2025-09-21T17:02:43.728484",
      "success": true,
      "sql": "WITH segment_averages AS (\n  SELECT \n    GENDER,\n    SENIORCITIZEN,\n    CONTRACT,\n    AVG(TENURE) as avg_tenure,\n    AVG(MONTHLYCHARGES) as avg_monthly_charges,\n    AVG(TOTALCHARGES) as avg_total_charges\n  FROM TELCO_DATA\n  GROUP BY GENDER, SENIORCITIZEN, CONTRACT\n),\ncustomer_comparisons AS (\n  SELECT \n    t.CUSTOMERID,\n    t.GENDER,\n    t.SENIORCITIZEN,\n    t.CONTRACT,\n    CASE WHEN t.TENURE > s.avg_tenure THEN 1 ELSE 0 END as above_avg_tenure,\n    CASE WHEN t.MONTHLYCHARGES > s.avg_monthly_charges THEN 1 ELSE 0 END as above_avg_monthly,\n    CASE WHEN t.TOTALCHARGES > s.avg_total_charges THEN 1 ELSE 0 END as above_avg_total\n  FROM TELCO_DATA t\n  JOIN segment_averages s ON t.GENDER = s.GENDER \n    AND t.SENIORCITIZEN = s.SENIORCITIZEN \n    AND t.CONTRACT = s.CONTRACT\n)\nSELECT CUSTOMERID\nFROM customer_comparisons\nWHERE (above_avg_tenure + above_avg_monthly + above_avg_total) >= 3;\n",
      "error": null,
      "matched_expectation": false
    },
    {
      "id": "subquery_5",
      "query": "Show customers with tenure above company median",
      "capability": "scalar_subquery",
      "timestamp": "2025-09-21T17:02:48.459761",
      "success": true,
      "sql": "SELECT *\nFROM TELCO_DATA\nWHERE TENURE > (\n    SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TENURE)\n    FROM TELCO_DATA\n);\n",
      "error": null,
      "matched_expectation": false
    },
    {
      "id": "formula_1",
      "query": "Calculate churn rate as percentage",
      "capability": "formula",
      "timestamp": "2025-09-21T17:02:50.624635",
      "success": true,
      "sql": "SELECT \n    ROUND((COUNT(CASE WHEN CHURN = 'Yes' THEN 1 END) * 100.0 / COUNT(*)), 2) AS churn_rate_percentage\nFROM TELCO_DATA;\n",
      "error": null,
      "matched_expectation": true
    },
    {
      "id": "formula_2",
      "query": "Show customer lifetime value as tenure times monthly charges",
      "capability": "formula",
      "timestamp": "2025-09-21T17:02:52.146980",
      "success": true,
      "sql": "SELECT \n    CUSTOMERID,\n    TENURE * MONTHLYCHARGES AS customer_lifetime_value\nFROM TELCO_DATA;\n",
      "error": null,
      "matched_expectation": true
    },
    {
      "id": "formula_3",
      "query": "Calculate win rate with null protection for opportunities",
      "capability": "conditional",
      "timestamp": "2025-09-21T17:02:53.553196",
      "success": true,
      "sql": "SELECT \n    COALESCE(\n        ROUND(\n            (COUNT(CASE WHEN C4 = 'Won' OR C4 = 'Closed Won' THEN 1 END) * 100.0) / \n            NULLIF(COUNT(CASE WHEN C4 IS NOT NULL AND C4 != '' THEN 1 END), 0), \n            2\n        ), \n        0\n    ) AS win_rate\nFROM OPENOPPORTUNITIES;\n",
      "error": null,
      "matched_expectation": false
    },
    {
      "id": "formula_filter_1",
      "query": "Show contract types where churn rate exceeds 30%",
      "capability": "formula_filter",
      "timestamp": "2025-09-21T17:02:56.382422",
      "success": true,
      "sql": "SELECT CONTRACT\nFROM TELCO_DATA\nGROUP BY CONTRACT\nHAVING (COUNT(CASE WHEN CHURN = 'Yes' THEN 1 END) * 100.0 / COUNT(*)) > 30;\n",
      "error": null,
      "matched_expectation": false
    },
    {
      "id": "formula_filter_2",
      "query": "Payment methods where average revenue per user is above 75",
      "capability": "formula_filter",
      "timestamp": "2025-09-21T17:02:58.867018",
      "success": true,
      "sql": "SELECT PAYMENTMETHOD\nFROM TELCO_DATA\nGROUP BY PAYMENTMETHOD\nHAVING AVG(TOTALCHARGES) > 75;\n",
      "error": null,
      "matched_expectation": false
    },
    {
      "id": "formula_filter_3",
      "query": "Show products (C6) where close rate times average deal size exceeds 10000",
      "capability": "formula_filter",
      "timestamp": "2025-09-21T17:03:00.009902",
      "success": true,
      "sql": "SELECT C6\nFROM OPENOPPORTUNITIES\nGROUP BY C6\nHAVING (COUNT(CASE WHEN C4 = 'Closed Won' THEN 1 END) * 1.0 / COUNT(*)) * AVG(C3) > 10000;\n",
      "error": null,
      "matched_expectation": false
    },
    {
      "id": "time_1",
      "query": "Month-over-month change in customer count",
      "capability": "window_function",
      "timestamp": "2025-09-21T17:03:02.883231",
      "success": false,
      "sql": "WITH monthly_customers AS (\n  SELECT \n    DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month' * (TENURE - 1)) as month,\n    COUNT(DISTINCT CUSTOMERID) as customer_count\n  FROM TELCO_DATA\n  WHERE CHURN = 'No'\n  GROUP BY DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month' * (TENURE - 1))\n),\nmonthly_change AS (\n  SELECT \n    month,\n    customer_count,\n    LAG(customer_count) OVER (ORDER BY month) as prev_month_count,\n    customer_count - LAG(customer_count) OVER (ORDER BY month) as mom_change,\n    ROUND(((customer_count - LAG(customer_count) OVER (ORDER BY month)) * 100.0 / LAG(customer_count) OVER (ORDER BY month)), 2) as mom_change_pct\n  FROM monthly_customers\n)\nSELECT \n  month,\n  customer_count,\n  prev_month_count,\n  mom_change,\n  mom_change_pct\nFROM monthly_change\nWHERE prev_month_count IS NOT NULL\nORDER BY month;\n",
      "error": "001044 (42P13): SQL compilation error: error line 3 at position 58\nInvalid argument types for function '*': (INTERVAL, NUMBER(38,0))",
      "matched_expectation": true
    },
    {
      "id": "time_3",
      "query": "3-month moving average of monthly charges",
      "capability": "window_function",
      "timestamp": "2025-09-21T17:03:06.352412",
      "success": true,
      "sql": "SELECT \n    CUSTOMERID,\n    MONTHLYCHARGES,\n    AVG(MONTHLYCHARGES) OVER (\n        PARTITION BY CUSTOMERID \n        ORDER BY TENURE \n        ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n    ) AS three_month_moving_avg\nFROM TELCO_DATA\nORDER BY CUSTOMERID, TENURE;\n",
      "error": null,
      "matched_expectation": false
    },
    {
      "id": "complex_3",
      "query": "Show YoY growth by quarter with significance testing",
      "capability": "window_function",
      "timestamp": "2025-09-21T17:03:10.722322",
      "success": true,
      "sql": "WITH quarterly_data AS (\n  SELECT \n    EXTRACT(YEAR FROM C1) as year,\n    EXTRACT(QUARTER FROM C1) as quarter,\n    COUNT(*) as opportunity_count,\n    SUM(C3) as total_amount,\n    AVG(C3) as avg_amount,\n    STDDEV(C3) as stddev_amount\n  FROM OPENOPPORTUNITIES \n  WHERE C1 IS NOT NULL AND C3 IS NOT NULL\n  GROUP BY EXTRACT(YEAR FROM C1), EXTRACT(QUARTER FROM C1)\n),\nyoy_growth AS (\n  SELECT \n    q1.year,\n    q1.quarter,\n    q1.total_amount as current_amount,\n    q2.total_amount as prior_year_amount,\n    q1.opportunity_count as current_count,\n    q2.opportunity_count as prior_year_count,\n    q1.avg_amount as current_avg,\n    q2.avg_amount as prior_year_avg,\n    q1.stddev_amount as current_stddev,\n    q2.stddev_amount as prior_year_stddev,\n    CASE \n      WHEN q2.total_amount > 0 THEN \n        ((q1.total_amount - q2.total_amount) / q2.total_amount) * 100\n      ELSE NULL \n    END as yoy_growth_pct,\n    CASE \n      WHEN q2.opportunity_count > 0 THEN \n        ((q1.opportunity_count - q2.opportunity_count) / q2.opportunity_count::float) * 100\n      ELSE NULL \n    END as yoy_count_growth_pct\n  FROM quarterly_data q1\n  LEFT JOIN quarterly_data q2 ON q1.quarter = q2.quarter AND q1.year = q2.year + 1\n)\nSELECT \n  year,\n  quarter,\n  current_amount,\n  prior_year_amount,\n  yoy_growth_pct,\n  current_count,\n  prior_year_count,\n  yoy_count_growth_pct,\n  CASE \n    WHEN prior_year_stddev > 0 AND current_stddev > 0 AND prior_year_count > 1 AND current_count > 1 THEN\n      ABS(current_avg - prior_year_avg) / SQRT((current_stddev * current_stddev / current_count) + (prior_year_stddev * prior_year_stddev / prior_year_count))\n    ELSE NULL \n  END as t_statistic,\n  CASE \n    WHEN ABS(current_avg - prior_year_avg) / SQRT((current_stddev * current_stddev / current_count) + (prior_year_stddev * prior_year_stddev / prior_year_count)) > 1.96 \n    THEN 'Significant'\n    ELSE 'Not Significant'\n  END as significance_95pct\nFROM yoy_growth\nWHERE prior_year_amount IS NOT NULL\nORDER BY year, quarter;\n",
      "error": null,
      "matched_expectation": false
    },
    {
      "id": "time_2",
      "query": "Running total of opportunities by date (C1)",
      "capability": "cumulative",
      "timestamp": "2025-09-21T17:03:21.861988",
      "success": true,
      "sql": "SELECT \n    C1,\n    COUNT(*) OVER (ORDER BY C1 ROWS UNBOUNDED PRECEDING) AS running_total\nFROM OPENOPPORTUNITIES\nORDER BY C1;\n",
      "error": null,
      "matched_expectation": false
    },
    {
      "id": "stat_1",
      "query": "Standard deviation of monthly charges",
      "capability": "statistical",
      "timestamp": "2025-09-21T17:03:23.205994",
      "success": true,
      "sql": "SELECT STDDEV(MONTHLYCHARGES) AS standard_deviation_monthly_charges\nFROM TELCO_DATA;\n",
      "error": null,
      "matched_expectation": true
    },
    {
      "id": "stat_2",
      "query": "Correlation between tenure and total charges",
      "capability": "statistical",
      "timestamp": "2025-09-21T17:03:25.368744",
      "success": true,
      "sql": "SELECT \n    CORR(TENURE, TOTALCHARGES) AS correlation_tenure_totalcharges\nFROM TELCO_DATA\nWHERE TOTALCHARGES IS NOT NULL \n    AND TENURE IS NOT NULL;\n",
      "error": null,
      "matched_expectation": false
    },
    {
      "id": "stat_3",
      "query": "75th percentile of opportunity amounts (C3)",
      "capability": "statistical",
      "timestamp": "2025-09-21T17:03:27.326554",
      "success": true,
      "sql": "SELECT PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY C3) AS percentile_75th\nFROM OPENOPPORTUNITIES;\n",
      "error": null,
      "matched_expectation": false
    },
    {
      "id": "ml_1",
      "query": "Why are customers churning?",
      "capability": "ml_relationship",
      "timestamp": "2025-09-21T17:03:34.467510",
      "success": false,
      "sql": "SELECT \n    CHURN,\n    COUNT(*) as customer_count,\n    AVG(TENURE) as avg_tenure,\n    AVG(MONTHLYCHARGES) as avg_monthly_charges,\n    AVG(TOTALCHARGES) as avg_total_charges,\n    CONTRACT,\n    PAYMENTMETHOD,\n    INTERNETSERVICE,\n    ONLINESECURITY\nFROM TELCO_DATA\nGROUP BY CHURN, CONTRACT, PAYMENTMETHOD, INTERNETSERVICE, ONLINESECURITY\nORDER BY CHURN DESC, customer_count DESC;\n\nSELECT \n    'Tenure Analysis' as analysis_type,\n    CASE \n        WHEN TENURE <= 12 THEN '0-12 months'\n        WHEN TENURE <= 24 THEN '13-24 months'\n        WHEN TENURE <= 36 THEN '25-36 months'\n        ELSE '36+ months'\n    END as tenure_group,\n    COUNT(*) as total_customers,\n    SUM(CASE WHEN CHURN = 'Yes' THEN 1 ELSE 0 END) as churned_customers,\n    ROUND(SUM(CASE WHEN CHURN = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) as churn_rate\nFROM TELCO_DATA\nGROUP BY tenure_group\nORDER BY churn_rate DESC;\n\nSELECT \n    'Contract Analysis' as analysis_type,\n    CONTRACT,\n    COUNT(*) as total_customers,\n    SUM(CASE WHEN CHURN = 'Yes' THEN 1 ELSE 0 END) as churned_customers,\n    ROUND(SUM(CASE WHEN CHURN = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) as churn_rate\nFROM TELCO_DATA\nGROUP BY CONTRACT\nORDER BY churn_rate DESC;\n",
      "error": "000008 (0A000): Actual statement count 3 did not match the desired statement count 1.",
      "matched_expectation": true
    },
    {
      "id": "ml_2",
      "query": "What factors predict high monthly charges?",
      "capability": "ml_relationship",
      "timestamp": "2025-09-21T17:03:40.397425",
      "success": true,
      "sql": "SELECT \n    CASE WHEN MONTHLYCHARGES >= 70 THEN 'High' ELSE 'Low' END as charge_category,\n    GENDER,\n    SENIORCITIZEN,\n    AVG(TENURE) as avg_tenure,\n    CONTRACT,\n    PAYMENTMETHOD,\n    INTERNETSERVICE,\n    ONLINESECURITY,\n    AVG(MONTHLYCHARGES) as avg_monthly_charges,\n    COUNT(*) as customer_count\nFROM TELCO_DATA\nGROUP BY \n    CASE WHEN MONTHLYCHARGES >= 70 THEN 'High' ELSE 'Low' END,\n    GENDER,\n    SENIORCITIZEN,\n    CONTRACT,\n    PAYMENTMETHOD,\n    INTERNETSERVICE,\n    ONLINESECURITY\nORDER BY avg_monthly_charges DESC;\n",
      "error": null,
      "matched_expectation": false
    },
    {
      "id": "ml_3",
      "query": "Segment customers into groups",
      "capability": "ml_cluster",
      "timestamp": "2025-09-21T17:03:44.391699",
      "success": true,
      "sql": "SELECT \n    CASE \n        WHEN TENURE <= 12 AND MONTHLYCHARGES < 50 THEN 'New Low Value'\n        WHEN TENURE <= 12 AND MONTHLYCHARGES >= 50 THEN 'New High Value'\n        WHEN TENURE BETWEEN 13 AND 36 AND MONTHLYCHARGES < 50 THEN 'Medium Tenure Low Value'\n        WHEN TENURE BETWEEN 13 AND 36 AND MONTHLYCHARGES >= 50 THEN 'Medium Tenure High Value'\n        WHEN TENURE > 36 AND MONTHLYCHARGES < 50 THEN 'Long Term Low Value'\n        WHEN TENURE > 36 AND MONTHLYCHARGES >= 50 THEN 'Long Term High Value'\n    END AS customer_segment,\n    COUNT(*) as customer_count,\n    AVG(MONTHLYCHARGES) as avg_monthly_charges,\n    AVG(TOTALCHARGES) as avg_total_charges,\n    SUM(CASE WHEN CHURN = 'Yes' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) as churn_rate\nFROM TELCO_DATA\nGROUP BY \n    CASE \n        WHEN TENURE <= 12 AND MONTHLYCHARGES < 50 THEN 'New Low Value'\n        WHEN TENURE <= 12 AND MONTHLYCHARGES >= 50 THEN 'New High Value'\n        WHEN TENURE BETWEEN 13 AND 36 AND MONTHLYCHARGES < 50 THEN 'Medium Tenure Low Value'\n        WHEN TENURE BETWEEN 13 AND 36 AND MONTHLYCHARGES >= 50 THEN 'Medium Tenure High Value'\n        WHEN TENURE > 36 AND MONTHLYCHARGES < 50 THEN 'Long Term Low Value'\n        WHEN TENURE > 36 AND MONTHLYCHARGES >= 50 THEN 'Long Term High Value'\n    END\nORDER BY customer_count DESC;\n",
      "error": null,
      "matched_expectation": false
    }
  ]
}