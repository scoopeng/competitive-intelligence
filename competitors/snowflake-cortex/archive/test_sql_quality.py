#!/usr/bin/env python3
"""
Analyze the QUALITY and REASONABLENESS of SQL generated by CORTEX.COMPLETE
Not just whether it executes, but whether it actually answers the question
"""

import snowflake.connector
import json

# Connection
conn = snowflake.connector.connect(
    account='toajlpe-nfb33705',
    user='bradscoop',
    password='D6c2BmtJWPy3dM7',
    warehouse='COMPUTE_WH',
    database='SCOOP_BENCHMARK',
    schema='TEST_DATA'
)
cursor = conn.cursor()

print("="*80)
print("SQL QUALITY ANALYSIS - DOES IT ACTUALLY ANSWER THE QUESTION?")
print("="*80)

# Test cases with expected vs actual analysis
quality_tests = [
    {
        "id": "QUAL_001",
        "natural_query": "Why are customers leaving?",
        "with_context": "Why are customers leaving in the TELCO_DATA table?",
        "expected_analysis": "Multi-step investigation finding correlations and drivers",
        "evaluation_criteria": "Does it investigate causes or just describe?"
    },
    {
        "id": "QUAL_002",
        "natural_query": "What patterns predict churn?",
        "with_context": "What patterns in TELCO_DATA predict CHURN = true?",
        "expected_analysis": "Statistical correlations, predictive factors",
        "evaluation_criteria": "Does it find patterns or just group data?"
    },
    {
        "id": "QUAL_003",
        "natural_query": "Show me churn rate by contract type",
        "with_context": "Show churn rate by CONTRACT in TELCO_DATA table",
        "expected_analysis": "Percentage of churned customers per contract type",
        "evaluation_criteria": "Does it calculate rate correctly?"
    },
    {
        "id": "QUAL_004",
        "natural_query": "Which factors most influence customer retention?",
        "with_context": "Which factors in TELCO_DATA most influence CHURN = false?",
        "expected_analysis": "Correlation analysis, factor ranking",
        "evaluation_criteria": "Does it identify influential factors?"
    }
]

results = []

for test in quality_tests:
    print(f"\n{'='*70}")
    print(f"[{test['id']}] Testing: {test['natural_query']}")
    print(f"Expected: {test['expected_analysis']}")
    print("-"*70)
    
    # Test with context (more likely to generate SQL)
    query = test['with_context']
    
    try:
        cursor.execute(f"""
        SELECT SNOWFLAKE.CORTEX.COMPLETE(
            'llama3-70b',
            %s
        ) as response
        """, (query,))
        
        result = cursor.fetchone()
        
        if result and result[0]:
            response = result[0]
            
            print(f"\nRESPONSE:")
            print(response[:400])
            if len(response) > 400:
                print("...")
            
            # Extract SQL if present
            has_sql = 'SELECT' in response.upper()
            
            if has_sql:
                # Find the SQL
                sql_start = response.upper().find('SELECT')
                sql = response[sql_start:]
                
                # Clean it
                if '```' in sql:
                    sql = sql.split('```')[0]
                if ';' in sql:
                    sql = sql.split(';')[0] + ';'
                
                print(f"\nGENERATED SQL:")
                print(sql[:300])
                
                # Analyze quality
                print(f"\nQUALITY ASSESSMENT:")
                print(f"Evaluation: {test['evaluation_criteria']}")
                
                # Check for investigation keywords
                is_investigation = any(word in sql.upper() for word in 
                    ['CORR', 'STDDEV', 'VARIANCE', 'REGRESSION', 'PREDICT'])
                is_multi_factor = sql.upper().count('JOIN') > 0 or sql.upper().count('WITH') > 0
                has_calculation = 'CASE' in sql.upper() or '/' in sql
                is_grouped = 'GROUP BY' in sql.upper()
                
                print(f"  - Investigation query: {'YES' if is_investigation else 'NO'}")
                print(f"  - Multi-factor analysis: {'YES' if is_multi_factor else 'NO'}")
                print(f"  - Has calculations: {'YES' if has_calculation else 'NO'}")
                print(f"  - Grouped/aggregated: {'YES' if is_grouped else 'NO'}")
                
                # Try to execute
                try:
                    cursor.execute(sql)
                    rows = cursor.fetchall()
                    print(f"  - Executes successfully: YES ({len(rows)} rows)")
                    
                    # Check if result is reasonable
                    if test['id'] == 'QUAL_003' and rows:  # Churn rate
                        print(f"  - Sample result: {rows[0]}")
                        reasonable = True
                    else:
                        reasonable = is_investigation or (is_grouped and has_calculation)
                    
                    print(f"  - ANSWERS THE QUESTION: {'PARTIALLY' if reasonable else 'NO'}")
                    
                except Exception as e:
                    print(f"  - Executes successfully: NO ({str(e)[:50]})")
                    reasonable = False
                
                results.append({
                    "query": test['natural_query'],
                    "sql_generated": True,
                    "executes": True if 'rows' in locals() else False,
                    "answers_question": reasonable,
                    "is_investigation": is_investigation
                })
                
            else:
                print("\n‚ùå NO SQL GENERATED - Generic explanation only")
                results.append({
                    "query": test['natural_query'],
                    "sql_generated": False,
                    "answers_question": False
                })
                
    except Exception as e:
        print(f"ERROR: {str(e)}")

# Summary
print("\n" + "="*80)
print("SQL QUALITY SUMMARY - DO THE QUERIES ACTUALLY HELP?")
print("="*80)

print("\n| Query Type | SQL Gen | Executes | Answers Question | Investigation |")
print("|------------|---------|----------|------------------|---------------|")
for r in results:
    sql = "‚úÖ" if r.get('sql_generated') else "‚ùå"
    exe = "‚úÖ" if r.get('executes') else "‚ùå"
    ans = "‚úÖ" if r.get('answers_question') else "‚ùå"
    inv = "‚úÖ" if r.get('is_investigation') else "‚ùå"
    print(f"| {r['query'][:30]:30} | {sql:^7} | {exe:^8} | {ans:^16} | {inv:^13} |")

print("\nüî¥ KEY FINDING:")
print("Even when SQL is generated and executes successfully,")
print("it rarely answers investigation questions meaningfully.")
print("CORTEX.COMPLETE does description, not investigation.")

conn.close()